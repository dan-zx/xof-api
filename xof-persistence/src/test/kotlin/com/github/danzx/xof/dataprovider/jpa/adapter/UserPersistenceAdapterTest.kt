package com.github.danzx.xof.dataprovider.jpa.adapter

import com.github.danzx.xof.core.domain.Ids
import com.github.danzx.xof.core.domain.User
import com.github.danzx.xof.dataprovider.jpa.repository.UserJpaRepository
import com.github.danzx.xof.dataprovider.jpa.test.TEST_USER

import io.kotlintest.shouldBe
import io.kotlintest.shouldNotBe

import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.test.context.jdbc.Sql

import java.time.LocalDateTime

class UserPersistenceAdapterTest : PersistenceAdapterBaseTest() {

    @Autowired lateinit var userJpaRepository: UserJpaRepository

    lateinit var adapter: UserPersistenceAdapter

    @BeforeEach
    fun onBeforeTest() {
        adapter = UserPersistenceAdapter()
        adapter.userJpaRepository = userJpaRepository
    }

    @Test
    fun `should save return non null user with non negative id`() {
        val autoGeneratedId = Ids.AUTO_GENERATED
        val user = TEST_USER.copy(id = autoGeneratedId)

        adapter.save(user)
        val actual = adapter.loadById(user.id)

        actual shouldNotBe null
        actual!!.id shouldNotBe autoGeneratedId
        actual shouldBe TEST_USER.copy(actual.id )
    }

    @Test
    @Sql("classpath:test-user.sql")
    fun `should load by id return non null user when user exists`() {
        val actual = adapter.loadById(TEST_USER.id)
        actual shouldNotBe null
        actual shouldBe TEST_USER
    }

    @Test
    fun `should load by id return null user when user does not exist`() {
        adapter.loadById(TEST_USER.id) shouldBe null
    }

    @Test
    @Sql("classpath:test-user.sql")
    fun `should load by username return non null user when user exists`() {
        val actual = adapter.loadByUsername(TEST_USER.username)
        actual shouldNotBe null
        actual shouldBe TEST_USER
    }

    @Test
    fun `should load by username return null user when user does not exist`() {
        adapter.loadByUsername(TEST_USER.username) shouldBe null
    }

    @Test
    @Sql("classpath:test-user.sql")
    fun `should exists by id return true when user exists`() {
        adapter.existsId(TEST_USER.id) shouldBe true
    }

    @Test
    fun `should exists by id return false user when user does not exist`() {
        adapter.existsId(TEST_USER.id) shouldBe false
    }

    @Test
    @Sql("classpath:test-user.sql")
    fun `should exists by username return true when user exists`() {
        adapter.existsUsername(TEST_USER.username) shouldBe true
    }

    @Test
    fun `should exists by username return false when user does not exist`() {
        adapter.existsUsername(TEST_USER.username) shouldBe false
    }

    @Test
    @Sql("classpath:test-user.sql")
    fun `should update return non null updated user`() {
        val user = adapter.loadById(TEST_USER.id)
        user shouldNotBe null

        user!!.apply {
            name = "My name"
            lastName = "My Last Name"
            username = "My Username"
            avatarImageUrl = "http://my.userimage.jpg"
        }

        adapter.update(user)
        val expected = adapter.loadById(user.id)

        user shouldNotBe null
        user shouldBe expected
    }

    @Test
    @Sql("classpath:test-user.sql")
    fun `should remove by id delete user when user exists`() {
        var user = adapter.loadById(TEST_USER.id)
        user shouldNotBe null

        adapter.removeById(TEST_USER.id)

        user = adapter.loadById(TEST_USER.id)
        user shouldBe null
    }
}